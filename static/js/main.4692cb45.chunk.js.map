{"version":3,"sources":["GameState.js","Hand.js","Helpers.js","GameContext.js","containers/Header.jsx","containers/HandButton.jsx","containers/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["GameState","Object","freeze","USER_SELECTING_HAND","AI_SELECTING_HAND","WON","LOSE","DRAW","Hands","ROCK","id","name","ico","faHandRock","value","PAPER","faHandPaper","SCISSORS","faHandScissors","HandHelper","randomVal","Math","floor","random","key","Error","playerHand","cpuHand","gameState","useStateWithLabel","initialValue","useState","setValue","useDebugValue","GameContext","React","createContext","GameContextProvider","children","score","setScore","selectedHand","setSelectedHand","setCpuHand","setGameState","Provider","playerChooseHand","hand","setTimeout","tempCpuHand","getRandomHand","tempGameState","getGameStatus","prev","getScoreModForState","handlePlayAgainClick","Header","useContext","className","HandButton","isDisabled","isCpuHand","hide","isThisHandSelected","faSpinner","classNames","cpuSelected","selected","onClick","disabled","icon","spin","Board","gameText","isDrawLoseWonState","active","handsEl","notHide","push","map","h","getHandsButtonsToChoose","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4692cb45.chunk.js","sourcesContent":["const GameState = Object.freeze({\r\n  USER_SELECTING_HAND: \"user\",\r\n  AI_SELECTING_HAND: \"ai\",\r\n  WON: \"won\",\r\n  LOSE: \"lose\",\r\n  DRAW: \"draw\",\r\n});\r\n\r\n\r\nexport default GameState;","import GameState from \"./GameState\";\r\nimport {\r\n  faHandRock,\r\n  faHandPaper,\r\n  faHandScissors,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const Hands = {\r\n  ROCK: { id: 0, name: \"rock\", ico: faHandRock, value: 0 },\r\n  PAPER: { id: 1, name: \"paper\", ico: faHandPaper, value: 1 },\r\n  SCISSORS: { id: 2, name: \"scissors\", ico: faHandScissors, value: 2 },\r\n};\r\n\r\nexport default class HandHelper {\r\n  static getRandomHand() {\r\n    const randomVal = Math.floor(Math.random() * 3);\r\n    for (const key in Hands) {\r\n      if (Hands[key].value === randomVal) {\r\n        return Hands[key];\r\n      }\r\n    }\r\n\r\n    throw new Error(\"Cant return hand.\");\r\n  }\r\n\r\n  static getGameStatus(playerHand, cpuHand) {\r\n    debugger;\r\n    if ((playerHand.value + 1) % 3  === cpuHand.value) {\r\n      return GameState.LOSE;\r\n    } else if ((cpuHand.value + 1) % 3 === playerHand.value) {\r\n      return GameState.WON;\r\n    } else return GameState.DRAW;\r\n  }\r\n\r\n  static getScoreModForState(gameState) {\r\n    switch (gameState) {\r\n      case GameState.WON:\r\n        return 1;\r\n      case GameState.LOSE:\r\n        return -1;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n}\r\n","import {useState, useDebugValue} from 'react'\r\n\r\n\r\nexport function useStateWithLabel(initialValue, name) {\r\n    const [value, setValue] = useState(initialValue);\r\n    useDebugValue(`${name}: ${value}`);\r\n    return [value, setValue];\r\n}","import React from \"react\";\r\nimport GameState from \"./GameState\";\r\nimport HandHelper from \"./Hand\";\r\nimport { useStateWithLabel } from \"./Helpers\";\r\n\r\nexport const GameContext = React.createContext();\r\n\r\nexport const GameContextProvider = ({ children }) => {\r\n  const [score, setScore] = useStateWithLabel(0, \"score\");\r\n  const [selectedHand, setSelectedHand] = useStateWithLabel(\r\n    null,\r\n    \"selectedHand\"\r\n  );\r\n  const [cpuHand, setCpuHand] = useStateWithLabel(null, \"cpuHand\");\r\n  const [gameState, setGameState] = useStateWithLabel(\r\n    GameState.USER_SELECTING_HAND,\r\n    \"gameState\"\r\n  );\r\n\r\n  const playerChooseHand = (hand) => {\r\n    setCpuHand(null);\r\n    setSelectedHand(hand);\r\n    setGameState(GameState.AI_SELECTING_HAND);\r\n    setTimeout(() => {\r\n      const tempCpuHand = HandHelper.getRandomHand();\r\n      setCpuHand(tempCpuHand);\r\n      const tempGameState = HandHelper.getGameStatus(hand, tempCpuHand);\r\n      setGameState(tempGameState);\r\n\r\n      setScore((prev) => HandHelper.getScoreModForState(tempGameState) + prev);\r\n    }, 500);\r\n  };\r\n\r\n  const handlePlayAgainClick = () => {\r\n    \r\n    setSelectedHand(null);\r\n    setGameState(GameState.USER_SELECTING_HAND);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        score,\r\n        selectedHand,\r\n        cpuHand,\r\n        gameState,\r\n        playerChooseHand,\r\n        handlePlayAgainClick,\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport \"./styles/Header.scss\";\r\nimport { GameContext} from \"../GameContext\";\r\n\r\nexport default function Header() {\r\n  const { score } = useContext(GameContext);\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"title\">\r\n        <h1>Rock</h1>\r\n        <h1>Paper</h1>\r\n        <h1>Scissors</h1>\r\n      </div>\r\n      <div className=\"score\">\r\n      <h2>Score</h2>\r\n      <h1>{score}</h1></div>\r\n    </header>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { GameContext } from \"../GameContext\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport classNames from \"classnames\"; // npm install classnames\r\nimport \"./styles/HandButton.scss\"\r\n\r\nfunction HandButton({ hand, isDisabled, isCpuHand, hide }) {\r\n  const { playerChooseHand, selectedHand } = useContext(GameContext);\r\n\r\n  const isThisHandSelected = hand === selectedHand;\r\n  const ico = hand?.ico ?? faSpinner;\r\n\r\n  return (\r\n    <button\r\n      className={classNames(\"btnHand\", {\r\n        hide: hide,\r\n        cpuSelected: isCpuHand,\r\n        selected: isThisHandSelected && !isCpuHand,\r\n        [hand?.name]: hand?.name,\r\n      })}\r\n      onClick={() => playerChooseHand(hand)}\r\n      disabled={isDisabled}\r\n    >\r\n      <FontAwesomeIcon\r\n        className=\"gameIco\"\r\n        icon={ico}\r\n        spin={ico === faSpinner}\r\n      />\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default HandButton;\r\n","import React, { useContext } from \"react\";\r\nimport \"./styles/Board.scss\";\r\nimport { GameContext } from \"../GameContext\";\r\nimport GameState from \"../GameState\";\r\nimport { Hands } from \"../Hand\";\r\nimport HandButton from \"./HandButton\";\r\nimport classNames from \"classnames\";\r\n\r\nexport default function Board() {\r\n  const { gameState, handlePlayAgainClick, cpuHand, selectedHand } = useContext(\r\n    GameContext\r\n  );\r\n\r\n  const getHandsButtonsToChoose = () => {\r\n    const handsEl = [];\r\n    for (const key in Hands) {\r\n      const isThisHandSelected = Hands[key] === selectedHand;\r\n      const notHide =\r\n        gameState === GameState.USER_SELECTING_HAND ||\r\n        (isThisHandSelected && gameState !== GameState.USER_SELECTING_HAND);\r\n      const isDisabled = gameState !== GameState.USER_SELECTING_HAND;\r\n      handsEl.push(\r\n        <HandButton\r\n          key={Hands[key].id}\r\n          hand={Hands[key]}\r\n          isDisabled={isDisabled}\r\n          hide={!notHide}\r\n        />\r\n      );\r\n    }\r\n\r\n    return handsEl.map((h) => h);\r\n  };\r\n\r\n  const isDrawLoseWonState =\r\n    gameState === GameState.DRAW ||\r\n    gameState === GameState.WON ||\r\n    gameState === GameState.LOSE;\r\n\r\n  let gameText;\r\n  switch (gameState) {\r\n    case GameState.DRAW:\r\n      gameText = \"Draw\";\r\n      break;\r\n    case GameState.WON:\r\n      gameText = \"You won!\";\r\n      break;\r\n    case GameState.LOSE:\r\n      gameText = \"You lose!\";\r\n      break;\r\n    case GameState.AI_SELECTING_HAND:\r\n    case GameState.USER_SELECTING_HAND:\r\n      gameText = \"Choose you're hand!\";\r\n      break;\r\n    default:\r\n      gameText = \"Ups!\";\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <main className=\"board\">\r\n      <h1 className=\"gameResult active\">{gameText}</h1>\r\n      <div className=\"containerSquare\">\r\n        <button\r\n          className={classNames(\"simpleBtn\", \"tryAgain\", {\r\n            active: isDrawLoseWonState,\r\n          })}\r\n          onClick={handlePlayAgainClick}\r\n        >\r\n          Play again\r\n        </button>\r\n        {getHandsButtonsToChoose()}\r\n        {\r\n          // CPU hand\r\n          <HandButton\r\n            hand={cpuHand}\r\n            isDisabled={true}\r\n            isCpuHand={true}\r\n            hide={gameState === GameState.USER_SELECTING_HAND}\r\n          />\r\n        }\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport { GameContextProvider } from \"./GameContext\";\nimport Header from \"./containers/Header\";\nimport Board from \"./containers/Board\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <GameContextProvider>\n        <Header></Header>\n        <Board></Board>\n      </GameContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}